To modernize your front-end and back-end stack using Node.js, along with modern front-end technologies, you'll need to set up a Node.js server with Express and replace jQuery with something like **React** or **Vue** for a more scalable solution.

### Step 1: Set Up Node.js with Express

First, install Node.js if you havenâ€™t already, and initialize a new Node.js project.

```bash
mkdir guest-app
cd guest-app
npm init -y
npm install express body-parser cors
```

Next, create a simple Express server in `server.js`.

```js
// server.js
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const app = express();
const PORT = 8080;

app.use(bodyParser.json());
app.use(cors());  // Enable CORS

let guests = [];  // In-memory array to hold guest data

// GET: Fetch all guests
app.get('/api/PG2/guests', (req, res) => {
    res.json(guests);
});

// POST: Add a new guest
app.post('/api/PG2/guests', (req, res) => {
    const guest = {
        guestId: guests.length + 1,
        name: req.body.name,
        age: req.body.age,
        phoneNumber: req.body.phoneNumber,
        roomNumber: req.body.room.roomId,
        floor: Math.floor(Math.random() * 5) + 1,  // Random floor for demo
        dateOfOccupancy: req.body.dateOfOccupancy,
    };
    guests.push(guest);
    res.status(201).json(guest);
});

app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
```

### Step 2: Replace jQuery with React

To modernize the front end, let's use **React**. First, install `create-react-app` globally:

```bash
npx create-react-app guest-client
cd guest-client
npm start
```

In your `guest-client` directory, modify `App.js` to fetch guests and post new guests to the server using the `fetch` API instead of jQuery. Here's a basic React component to replace your current form:

```jsx
// src/App.js
import React, { useState, useEffect } from 'react';

function App() {
    const [guests, setGuests] = useState([]);
    const [formData, setFormData] = useState({
        name: '',
        age: '',
        phoneNumber: '',
        roomId: '',
        dateOfOccupancy: ''
    });

    useEffect(() => {
        // Fetch guests when component mounts
        loadGuests();
    }, []);

    const loadGuests = () => {
        fetch('http://localhost:8080/api/PG2/guests')
            .then(response => response.json())
            .then(data => setGuests(data))
            .catch(error => console.error('Error fetching guests:', error));
    };

    const handleSubmit = (event) => {
        event.preventDefault();
        fetch('http://localhost:8080/api/PG2/guests', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                ...formData,
                room: { roomId: formData.roomId }
            })
        })
            .then(response => response.json())
            .then(data => {
                alert('Guest added successfully!');
                setGuests([...guests, data]);
                setFormData({ name: '', age: '', phoneNumber: '', roomId: '', dateOfOccupancy: '' });
            })
            .catch(error => console.error('Error adding guest:', error));
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prevState => ({ ...prevState, [name]: value }));
    };

    return (
        <div className="container mt-5">
            <h1 className="text-center">Guest List</h1>

            <div className="card mb-4">
                <div className="card-header">Add New Guest</div>
                <div className="card-body">
                    <form onSubmit={handleSubmit}>
                        <div className="form-group">
                            <label>Name</label>
                            <input
                                type="text"
                                name="name"
                                value={formData.name}
                                onChange={handleChange}
                                className="form-control"
                                required
                            />
                        </div>
                        <div className="form-group">
                            <label>Age</label>
                            <input
                                type="number"
                                name="age"
                                value={formData.age}
                                onChange={handleChange}
                                className="form-control"
                                required
                            />
                        </div>
                        <div className="form-group">
                            <label>Phone Number</label>
                            <input
                                type="text"
                                name="phoneNumber"
                                value={formData.phoneNumber}
                                onChange={handleChange}
                                className="form-control"
                                required
                            />
                        </div>
                        <div className="form-group">
                            <label>Room ID</label>
                            <input
                                type="number"
                                name="roomId"
                                value={formData.roomId}
                                onChange={handleChange}
                                className="form-control"
                                required
                            />
                        </div>
                        <div className="form-group">
                            <label>Date of Occupancy</label>
                            <input
                                type="date"
                                name="dateOfOccupancy"
                                value={formData.dateOfOccupancy}
                                onChange={handleChange}
                                className="form-control"
                                required
                            />
                        </div>
                        <button type="submit" className="btn btn-primary">Add Guest</button>
                    </form>
                </div>
            </div>

            <table className="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Age</th>
                        <th>Phone Number</th>
                        <th>Room Number</th>
                        <th>Floor</th>
                        <th>Date of Occupancy</th>
                    </tr>
                </thead>
                <tbody>
                    {guests.length === 0 ? (
                        <tr>
                            <td colSpan="7">No guests found</td>
                        </tr>
                    ) : (
                        guests.map(guest => (
                            <tr key={guest.guestId}>
                                <td>{guest.guestId}</td>
                                <td>{guest.name}</td>
                                <td>{guest.age}</td>
                                <td>{guest.phoneNumber}</td>
                                <td>{guest.roomNumber}</td>
                                <td>{guest.floor}</td>
                                <td>{guest.dateOfOccupancy}</td>
                            </tr>
                        ))
                    )}
                </tbody>
            </table>
        </div>
    );
}

export default App;
```

### Step 3: Run Both the Node.js and React Applications

Start the Node.js server:
```bash
node server.js
```

Then, in a separate terminal, start the React application:
```bash
npm start
```

Your front-end will now use **React** to handle form submissions and display data dynamically, and your back-end will be powered by **Node.js** with **Express**. This is a modern, scalable setup using front-end React for dynamic UI and back-end Express for API handling.