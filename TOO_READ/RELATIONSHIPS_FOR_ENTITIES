### Entity Relationships in JPA and Hibernate

JPA/Hibernate provides various annotations to manage relationships between entities: `@OneToOne`, `@ManyToOne`, `@OneToMany`, and `@ManyToMany`. Let’s explore each in detail, along with examples and guidance on when to use them.

#### 1. **@OneToOne**
- **Definition**: A one-to-one relationship means that one entity is associated with only one other entity.
- **Example**:
    ```java
    @Entity
    public class Person {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long person_id;

        @OneToOne
        @JoinColumn(name = "passport_id")
        private Passport passport;
    }

    @Entity
    public class Passport {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long passport_id;

        private String passportNumber;
    }
    ```
    - In this example, a `Person` can have only one `Passport`, and vice versa. The `@JoinColumn` creates a foreign key in the `Person` table pointing to the `Passport`.

- **Use Case**: Useful when two entities have an exclusive relationship, such as a `Person` and their `Passport`, or `User` and `Profile`.

#### 2. **@ManyToOne**
- **Definition**: A many-to-one relationship means that multiple instances of one entity are associated with one instance of another entity.
- **Example**:
    ```java
    @Entity
    public class Guest {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long guest_id;

        @ManyToOne
        @JoinColumn(name = "room_id")
        private Room room;
    }

    @Entity
    public class Room {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long room_id;

        private String roomNumber;
    }
    ```
    - Here, multiple `Guest` objects can be associated with a single `Room`.

- **Use Case**: Common in scenarios like `Order` to `Customer`, where many orders are associated with a single customer, or many guests can occupy one room.

#### 3. **@OneToMany**
- **Definition**: A one-to-many relationship is the inverse of `@ManyToOne`. One instance of an entity is related to multiple instances of another entity.
- **Example**:
    ```java
    @Entity
    public class Room {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long room_id;

        @OneToMany(mappedBy = "room")
        private List<Guest> guests;
    }

    @Entity
    public class Guest {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long guest_id;

        @ManyToOne
        @JoinColumn(name = "room_id")
        private Room room;
    }
    ```
    - The `Room` entity contains a list of `Guests`, while each guest has a reference to the `Room`.

- **Use Case**: Best for when one entity (e.g., `Room`) is the parent of multiple entities (e.g., `Guest`). This can represent orders with many items or a department with many employees.

#### 4. **@ManyToMany**
- **Definition**: A many-to-many relationship occurs when multiple instances of an entity are associated with multiple instances of another entity.
- **Example**:
    ```java
    @Entity
    public class Student {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long student_id;

        @ManyToMany
        @JoinTable(
            name = "student_course",
            joinColumns = @JoinColumn(name = "student_id"),
            inverseJoinColumns = @JoinColumn(name = "course_id"))
        private Set<Course> courses;
    }

    @Entity
    public class Course {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long course_id;

        @ManyToMany(mappedBy = "courses")
        private Set<Student> students;
    }
    ```
    - A student can enroll in multiple courses, and each course can have multiple students. The `@JoinTable` creates the necessary join table `student_course`.

- **Use Case**: Useful when both entities have a many-to-many relationship, such as students and courses, tags and posts, or products and categories.

### When to Store an Entity vs. Storing Just Its Primary Key

#### 1. **Storing the Entire Entity (Object-Relational Mapping)**
- **Why**: This allows you to fully leverage JPA's features, such as cascading operations (saving, deleting), lazy/eager loading, and managing relationships.
- **Example**: If a `Guest` references a `Room`, storing the entire `Room` entity helps manage the relationship.
    ```java
    @ManyToOne
    @JoinColumn(name = "room_id")
    private Room room;
    ```
- **When to Use**:
  - When you need access to the related entity’s details within the application.
  - When automatic handling of relationships, foreign key constraints, and cascading operations are required.
  - For complex entities that need more than just the primary key.

#### 2. **Storing Only the Primary Key**
- **Why**: This is a more manual approach where you only store the foreign key (ID) without loading the full object.
- **Example**:
    ```java
    private Long roomId;
    ```
    - In this case, only the `room_id` is stored, and the `Room` entity is not directly managed.

- **When to Use**:
  - When performance is critical, and you don’t need to load the entire related entity.
  - In read-heavy applications where relationships don’t need to be traversed.
  - For simpler relationships where managing only IDs is sufficient.

### Conclusion: When to Store Entity vs. Entity's Primary Key
- **Store the entity**: Use it when you need full access to the related data and want JPA to manage relationships automatically.
- **Store the primary key**: Use it when you want to optimize for performance, reduce memory overhead, or in cases where relationships don’t need to be eagerly managed.

These techniques should be used based on performance considerations, application complexity, and the need to traverse relationships within the domain model.